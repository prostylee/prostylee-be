package vn.prostylee.order.entity;
// Generated Nov 28, 2020, 9:45:59 PM by Hibernate Tools 5.2.12.Final

import lombok.*;
import vn.prostylee.core.entity.AuditEntity;
import vn.prostylee.order.constants.OrderStatus;
import vn.prostylee.payment.entity.PaymentType;
import vn.prostylee.shipping.entity.ShippingAddress;
import vn.prostylee.shipping.entity.ShippingProvider;

import javax.persistence.*;
import java.util.Set;

/**
 * Order generated by hbm2java
 * @author prostylee
 */
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(callSuper = true)
@Entity
@Table(name = "order")
public class Order extends AuditEntity {

	private static final long serialVersionUID = 1L;

	@Id
	@SequenceGenerator(name = "order_seq", sequenceName = "order_seq", allocationSize = 1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "order_seq")
	@Column(name = "id", unique = true, nullable = false)
	private Long id;

	@Column(name = "code", length = 512)
	private String code;

	@Column(name = "total_money")
	private Double totalMoney;

	@Column(name = "status")
	private int status;

	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@OneToOne
	@JoinColumn(name = "payment_type_id")
	private PaymentType paymentType;

	@Column(name = "buyer_id")
	private Long buyerId;

	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = "order")
	private Set<OrderDetail> orderDetails;

	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = "order")
	private Set<OrderDiscount> orderDiscounts;

	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
	@JoinColumn(name = "shipping_address_id")
	private ShippingAddress shippingAddress;

	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@OneToOne
	@JoinColumn(name = "shipping_provider_id")
	private ShippingProvider shippingProvider;

	public OrderStatus getStatus() {
		return OrderStatus.parse(this.status);
	}

	public void setStatus(OrderStatus status) {
		this.status = status.getStatus();
	}
}
