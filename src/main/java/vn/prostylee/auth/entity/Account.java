package vn.prostylee.auth.entity;
// Generated Jun 28, 2020, 3:39:08 PM by Hibernate Tools 5.2.12.Final

import lombok.*;
import vn.prostylee.notification.entity.Notification;
import vn.prostylee.notification.entity.PushNotificationToken;
import vn.prostylee.core.entity.AuditEntity;

import javax.persistence.*;
import java.util.Date;
import java.util.Set;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Account generated by hbm2java
 * @author prostylee
 */
@Getter
@Setter
@NoArgsConstructor
@EqualsAndHashCode(callSuper = true)
@Entity
@Table(name = "account", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
public class Account extends AuditEntity {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	private Long id;

	@Column(name = "username", unique = true, nullable = false, length = 128)
	private String username;

	@Column(name = "password", nullable = false, length = 128)
	private String password;

	@Column(name = "full_name", length = 128)
	private String fullName;

	@Column(name = "phone_number", length = 20)
	private String phoneNumber;

	@Column(name = "gender")
	private Character gender;

	@Column(name = "active")
	private Boolean active;

	@Column(name = "allow_notification")
	private Boolean allowNotification;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "deleted_at", length = 19)
	private Date deletedAt;

	@Column(name = "email", length = 128)
	private String email;

	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	private Set<Notification> notifications;

	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	private Set<PushNotificationToken> pushNotificationTokens;

	@EqualsAndHashCode.Exclude
	@ToString.Exclude
	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "account_role", joinColumns = {
			@JoinColumn(name = "account_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "role_id", nullable = false, updatable = false) })
	private Set<Role> roles;

}
